{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","onInputChange","event","value","target","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","gif","src","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAAe,MAA0B,yC,eCKnCA,EAAiB,YACjBC,EAAY,8BAA0BD,GACtCE,EAAY,CACjB,0DACA,sIACA,sIACA,2DA2HcC,EAxHH,WAEV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA6BJ,mBAAS,IAAtC,mBAAMK,EAAN,KAAeC,EAAf,KAEMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEZC,SAAVC,EAFsB,EAEtBA,QAFsB,qBAIvBA,EAAOC,UAJgB,wBAKzBC,QAAQC,IAAI,wBALa,SAMFH,EAAOI,QAAQ,CAACC,eAAe,IAN7B,OAMnBC,EANmB,OAOzBJ,QAAQC,IACN,6BACAG,EAASC,UAAUC,YAErBhB,EAAiBc,EAASC,UAAUC,YAXX,gCAc3BC,MAAM,mDAdqB,0DAiB7BP,QAAQQ,MAAR,MAjB6B,0DAAH,qDAqBxBC,EAAa,uCAAG,gCAAAb,EAAA,2DACHC,SAAVC,EADa,EACbA,QADa,gCAGKA,EAAOI,UAHZ,OAGZE,EAHY,OAIlBJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7DhB,EAAiBc,EAASC,UAAUC,YALlB,2CAAH,qDASbI,EAAO,uCAAE,sBAAAd,EAAA,sDACTL,EAAWoB,OAAO,GACpBX,QAAQC,IAAI,YAAaV,GACzBG,EAAW,GAAD,mBAAKD,GAAL,CAAcF,KACxBC,EAAc,KAEdQ,QAAQC,IAAI,0BAND,2CAAF,qDAUPW,EAAgB,SAACC,GACvB,IAAMC,EAAQD,EAAME,OAAdD,MACJtB,EAAcsB,IA+ChB,OAfAE,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAArB,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOqB,iBAAiB,OAAQD,GAC1B,kBAAKpB,OAAOsB,oBAAoB,OAAQF,MAC7C,IAEHD,qBAAU,WACJ3B,IACFW,QAAQC,IAAI,wBACZP,EAAWR,MAEZ,CAACG,IAGF,qBAAK+B,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,yCACA,mBAAGA,UAAU,WAAb,+DAGE/B,GAnDR,wBACE+B,UAAU,mCACVC,QAASZ,EAFX,+BAoDOpB,GA5CP,sBAAK+B,UAAU,sBAAf,UACE,uBACEE,SAAU,SAACT,GACXA,EAAMU,iBACNb,KAHF,UAME,uBAAOc,KAAK,OAAOC,YAAY,iBAAiBX,MAAOvB,EAAYmC,SAAUd,IAC3E,wBAAQY,KAAK,SAASJ,UAAU,+BAAhC,uBAEJ,qBAAKA,UAAU,WAAf,SACG3B,EAAQkC,KAAI,SAAAC,GAAG,OACd,qBAAKR,UAAU,WAAf,SACE,qBAAKS,IAAKD,EAAKE,IAAKF,KADSA,cAkCjC,sBAAKR,UAAU,mBAAf,UACE,qBAAKU,IAAI,eAAeV,UAAU,eAAeS,IAAKE,IACtD,mBACEX,UAAU,cACVY,KAAM/C,EACN8B,OAAO,SACPkB,IAAI,aAJN,6BAKejD,cC1HzBkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.821ccfa0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React, {useEffect, useState} from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css'; \r\n\r\n// Constants\r\nconst TWITTER_HANDLE = 'surelinks';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\nconst TEST_GIFS = [\r\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\r\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\r\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\r\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\r\n]\r\n\r\nconst App = () => {\r\n\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('')\r\n  const[gifList, setGifList] = useState([]);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try{\r\n      const {solana} = window;\r\n      if(solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('Phantom wallet found');\r\n          const response = await solana.connect({onlyIfTrusted: true});\r\n          console.log(\r\n            'Connected with Public Key:', \r\n            response.publicKey.toString()\r\n          );\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      }else {\r\n        alert('solana object not found ! Get a phantom wallet ')\r\n      }\r\n    }catch (error){\r\n      console.error(error)\r\n    }\r\n  };\r\n\r\n  const connectWallet = async()=>{\r\n    const {solana} = window;\r\n    if(solana) {\r\n      const response = await solana.connect();\r\n      console.log('Connected with Public Key:', response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  const sendGif =async ()=> {\r\n    if (inputValue.length>0 ){\r\n      console.log('Gif link:', inputValue);\r\n      setGifList([...gifList, inputValue]);\r\n      setInputValue('');\r\n    }else {\r\n      console.log('Empty input. Try again');\r\n    }\r\n  };\r\n\r\n  const onInputChange = (event)=>{\r\n  const{value}= event.target;\r\n    setInputValue(value);\r\n   };\r\n\r\n  const renderNotConnectedContainer =()=> (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to wallet\r\n    </button>\r\n  )\r\n  const renderConnectedContainer = () => (\r\n    <div className=\"connected-container\">\r\n      <form\r\n        onSubmit={(event)=> {\r\n        event.preventDefault();\r\n        sendGif();\r\n      }}\r\n      >\r\n        <input type=\"text\" placeholder=\"Enter gif link\" value={inputValue} onChange={onInputChange}/>\r\n          <button type=\"submit\" className=\"cta-button submit-gof-buttin\">Submit</button>\r\n      </form>\r\n      <div className=\"gif-grid\">\r\n        {gifList.map(gif => (\r\n          <div className=\"gif-item\" key={gif}>\r\n            <img src={gif} alt={gif} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  useEffect(()=>{\r\n    const onLoad = async ()=>{\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return()=> window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    if (walletAddress){\r\n      console.log('Fetching Gif list...');\r\n      setGifList(TEST_GIFS);\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸ–¼ MY NFT PROFILE</p>\r\n          <p className=\"sub-text\">\r\n            View your GIF collection in the metaverse âœ¨\r\n          </p>\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}